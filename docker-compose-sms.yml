version: '2.4'
services:

  postgres:
    container_name: postgres
    networks:
      dittnav.docker-internal:
        aliases:
          - postgres.dittnav.docker-internal
    image: "postgres:11.5"
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
      - "./db-initscripts:/docker-entrypoint-initdb.d"
    ports:
      - "5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DATABASES: "${DB_NAME_BRUKERNOTIFIKASJON_CACHE}, ${DB_NAME_VARSELBESTILLER}, ${DB_NAME_BRUKERNOTIFIKASJONBESTILLER}"

  zookeeper:
    container_name: zookeeper
    networks:
      dittnav.docker-internal:
        aliases:
          - zookeeper.dittnav.docker-internal
    image: "confluentinc/cp-zookeeper:6.2.0"
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"

  kafka:
    container_name: kafka
    networks:
      dittnav.docker-internal:
        aliases:
          - kafka.dittnav.docker-internal
    image: "confluentinc/cp-kafka:6.2.0"
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      ADV_HOST: "kafka.dittnav.docker-internal"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper.dittnav.docker-internal:2181"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka.dittnav.docker-internal:9092,PLAINTEXT_HOST://localhost:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092"]
      interval: 20s
      timeout: 5s
      retries: 8

  schema-registry:
    container_name: schema-registry
    networks:
      dittnav.docker-internal:
        aliases:
          - schema-registry.dittnav.docker-internal
    image: "confluentinc/cp-schema-registry:5.5.0"
    ports:
      - "8081:8081"
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_started
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka.dittnav.docker-internal:9092"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry.dittnav.docker-internal"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"

  oidc-provider:
    container_name: oidc-provider
    networks:
      dittnav.docker-internal:
        aliases:
          - oidc-provider.dittnav.docker-internal
    image: "ghcr.io/navikt/stub-oidc-provider/stub-oidc-provider:latest"
    ports:
      - "9000:9000"
    environment:
      PORT: "9000"
      CALLBACK_URL: "http://localhost:50000/callback"
      ISSUER: ${OIDC_ISSUER}

  oidc-provider-gui:
    container_name: oidc-provider-gui
    networks:
      dittnav.docker-internal:
        aliases:
          - oidc-provider-gui.dittnav.docker-internal
    image: "ghcr.io/navikt/pb-oidc-provider-gui/pb-oidc-provider-gui:latest"
    ports:
      - "50000:50000"
    depends_on:
      - oidc-provider
    environment:
      REDIRECT_URL: "http://localhost:3000"
      AUTO_REDIRECT_TO_FRONTEND: "true"
      OIDC_PROVIDER_GUI_URL: "http://localhost:50000/callback"

  aggregator:
    container_name: aggregator
    networks:
      dittnav.docker-internal:
        aliases:
          - aggregator.dittnav.docker-internal
    image: "ghcr.io/navikt/dittnav-event-aggregator/dittnav-event-aggregator:latest"
    mem_limit: '1200m'
    mem_reservation: '1024m'
    ports:
      - "8093:8080"
    env_file: .env
    environment:
      SENSU_HOST: "stub"
      SENSU_PORT: "0"
      DB_DATABASE: ${DB_NAME_BRUKERNOTIFIKASJON_CACHE}
      DB_USERNAME: "${DB_NAME_BRUKERNOTIFIKASJON_CACHE}-user"
      POLL_BESKJED: "true"
      POLL_OPPGAVE: "true"
      POLL_INNBOKS: "true"
      POLL_STATUSOPPDATERING: "true"
      POLL_DONE: "true"
      INTERN_BESKJED_TOPIC: "min-side.privat-brukernotifikasjon-beskjed-v1"
      INTERN_OPPGAVE_TOPIC: "min-side.privat-brukernotifikasjon-oppgave-v1"
      INTERN_INNBOKS_TOPIC: "min-side.privat-brukernotifikasjon-innboks-v1"
      INTERN_STATUSOPPDATERING_TOPIC: "min-side.privat-brukernotifikasjon-statusoppdatering-v1"
      INTERN_DONE_TOPIC: "min-side.privat-brukernotifikasjon-done-v1"
      INPUT_DONE_TOPIC: "min-side.aapen-brukernotifikasjon-done-v1"
      # variabler for on-prem
      DB_NAME: ${DB_NAME_BRUKERNOTIFIKASJON_CACHE}
    depends_on:
      - schema-registry
      - postgres
      - oidc-provider-gui
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 http://localhost:8080/internal/isAlive"]
      interval: 2s
      timeout: 2s
      start_period: 30s
      retries: 10

  handler:
    container_name: handler
    networks:
      dittnav.docker-internal:
        aliases:
          - handler.dittnav.docker-internal
    image: "ghcr.io/navikt/dittnav-event-handler/dittnav-event-handler:latest"
    mem_limit: '768m'
    mem_reservation: '384m'
    ports:
      - "8092:8080"
    env_file:
      - .env
      - env/.tokenx.validate.env
      - env/.azure.validate.env
    environment:
      DB_EVENTHANDLER_HOST: ${DB_HOST}
      DB_EVENTHANDLER_DATABASE: ${DB_NAME_BRUKERNOTIFIKASJON_CACHE}
      DB_EVENTHANDLER_USERNAME: "${DB_NAME_BRUKERNOTIFIKASJON_CACHE}-user"
      DB_EVENTHANDLER_PASSWORD: ${DB_PASSWORD}
      DB_EVENTHANDLER_PORT: ${DB_PORT}
      OPEN_INPUT_DONE_TOPIC: "min-side.aapen-brukernotifikasjon-done-v1"
      TOKEN_X_CLIENT_ID: "dittnav-event-handler-clientid"
      AZURE_APP_CLIENT_ID: "dittnav-event-handler-clientid"
      # variabler for on-prem
      DB_NAME: ${DB_NAME_BRUKERNOTIFIKASJON_CACHE}
      FILTER_OLD_EVENTS: "false"
      FILTER_THRESHOLD_DAYS: 0
    depends_on:
      - schema-registry
      - oidc-provider-gui
      - postgres
      - aggregator
      - auth-mock

  api:
    container_name: api
    networks:
      dittnav.docker-internal:
        aliases:
          - api.dittnav.docker-internal
    image: "ghcr.io/navikt/dittnav-api/dittnav-api:latest"
    mem_limit: '768m'
    mem_reservation: '580m'
    ports:
      - "8091:8080"
    env_file:
      - .env
      - env/.tokenx.exchange.env
    environment:
      EVENT_HANDLER_URL: "http://handler.dittnav.docker-internal:8080/dittnav-event-handler"
      CORS_ALLOWED_ORIGINS: "localhost:3000"
      CORS_ALLOWED_SCHEMES: "http"
      CORS_ALLOWED_HEADERS: "fake"
      INNLOGGINGSSTATUS_URL: "http://dummy.io"
      UNLEASH_API_URL: "fake"
      DIGISOS_API_URL: "https://digisos/dummy/soknad"
      DIGISOS_INNSYN_API_URL: "https://digisos/dummy/innsyn"
      MINE_SAKER_URL: "https://dummy-minesaker.nav.no"
      MINE_SAKER_API_URL: "http://mocks.dittnav.docker-internal:8080/mine-saker-api"
      MINE_SAKER_API_CLIENT_ID: "mine-saker-api-client-id"
      PERSONALIA_API_URL: "http://mocks.dittnav.docker-internal:8080/tms-personalia-api"
      PERSONALIA_API_CLIENT_ID: "tms-personalia-api-client-id"
      TOKEN_X_CLIENT_ID: "dittnav-api-client-id"
      EVENTHANDLER_CLIENT_ID: "dittnav-event-handler-clientid"
      MININNBOKS_API_URL: "http://mocks.dittnav.docker-internal:8080/mininnboks-api"
      MELDEKORT_API_URL: "http://mocks.dittnav.docker-internal:8080/meldekort-api"
      MELDEKORT_CLIENT_ID: "meldekort-client-id"
      OPPFOLGING_API_URL: "http://mocks.dittnav.docker-internal:8080/oppfolging"
      INNLOGGINGSINFO_URL: "http://dummyInnloggingsinfo.nav.no"
    depends_on:
      oidc-provider:
        condition: service_started
      handler:
        condition: service_started
      auth-mock:
        condition: service_healthy

  mocks:
    container_name: mocks
    networks:
      dittnav.docker-internal:
        aliases:
          - mocks.dittnav.docker-internal
    image: "ghcr.io/navikt/pb-nav-mocked/pb-nav-mocked:latest"
    ports:
      - "8095:8080"
    env_file: .env
    environment:
      CORS_ALLOWED_ORIGINS: "localhost:3000"
      CORS_ALLOWED_SCHEMES: "http"
      OIDC_ISSUER: ${OIDC_ISSUER}
      OIDC_ACCEPTED_AUDIENCE: ${OIDC_ACCEPTED_AUDIENCE}
      OIDC_JWKS_URI: "http://oidc-provider.dittnav.docker-internal:9000/certs"
    depends_on:
      - oidc-provider
      - schema-registry

  producer:
    container_name: producer
    networks:
      dittnav.docker-internal:
        aliases:
          - producer.dittnav.docker-internal
    image: "ghcr.io/navikt/tms-event-test-producer/tms-event-test-producer:latest"
    mem_limit: '512m'
    mem_reservation: '256m'
    ports:
      - "8094:8080"
    env_file:
      - .env
      - env/.tokenx.exchange.env
    environment:
      CORS_ALLOWED_ORIGINS: "localhost:3000"
      CORS_ALLOWED_SCHEMES: "http"
      DB_NAME: ${DB_NAME_BRUKERNOTIFIKASJON_CACHE}
      OPEN_INPUT_BESKJED_TOPIC: "min-side.aapen-brukernotifikasjon-nyBeskjed-v1"
      OPEN_INPUT_OPPGAVE_TOPIC: "min-side.aapen-brukernotifikasjon-nyOppgave-v1"
      OPEN_INPUT_INNBOKS_TOPIC: "min-side.aapen-brukernotifikasjon-nyInnboks-v1"
      OPEN_INPUT_STATUSOPPDATERING_TOPIC: "min-side.aapen-brukernotifikasjon-nyStatusoppdatering-v1"
      OPEN_INPUT_DONE_TOPIC: "min-side.aapen-brukernotifikasjon-done-v1"
      EVENT_HANDLER_URL: "http://handler.dittnav.docker-internal:8080/dittnav-event-handler"
      EVENTHANDLER_CLIENT_ID: "dittnav-event-handler-clientid"
      TOKEN_X_CLIENT_ID: "tms-event-test-producer-clientid"
      ENABLE_API: "true"
    depends_on:
      - oidc-provider-gui
      - postgres
      - schema-registry

  auth-mock:
    container_name: auth-mock
    networks:
      dittnav.docker-internal:
        aliases:
          - auth-mock.dittnav.docker-internal
    image: "ghcr.io/navikt/tms-auth-mock/tms-auth-mock:latest"
    mem_limit: '768m'
    mem_reservation: '240m'
    ports:
      - "9051:8080"
    env_file: env/.auth-mock.jwk.env
    environment:
      LOCAL_URL: "http://auth-mock.dittnav.docker-internal:8080"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 http://localhost:8080/internal/isAlive" ]
      interval: 5s
      start_period: 30s
      timeout: 2s
      retries: 10

  dekoratoren:
    container_name: dekoratoren
    networks:
      dittnav.docker-internal:
        aliases:
          - dekoratoren.dittnav.docker-internal
    image: "ghcr.io/navikt/nav-dekoratoren/nav-dekoratoren:latest"
    mem_limit: '1500m'
    mem_reservation: '1500m'
    ports:
      - "8100:8088"
    environment:
      XP_BASE_URL: 'https://www-q1.nav.no'
      APP_BASE_URL: "http://localhost:8100"
      APP_BASE_PATH: "/dekoratoren"
      API_XP_MENY_URL: 'https://www-q1.nav.no/_/service/no.nav.navno/menu'
      API_XP_SOK_URL: 'https://www-q1.nav.no/_/service/navno.nav.no.search/search2/sok'
      API_INNLOGGINGSLINJE_URL: 'http://localhost:8095/innloggingsstatus'
      API_VARSELINNBOKS_URL: 'http://mocks.dittnav.docker-internal:8080/person/varselinnboks'
      MINSIDE_ARBEIDSGIVER_URL: 'https://arbeidsgiver-q.nav.no/min-side-arbeidsgiver/'
      DITT_NAV_URL: 'http://localhost:3000/person/dittnav/'
      LOGIN_URL: 'http://localhost:50000'
      LOGOUT_URL: 'http://localhost:50000/?logout'

  frontend:
    container_name: frontend
    networks:
      dittnav.docker-internal:
        aliases:
          - frontend.dittnav.docker-internal
    image: "ghcr.io/navikt/dittnav/dittnav:latest"
    mem_limit: '768m'
    mem_reservation: '512m'
    ports:
      - "3000:8080"
    environment:
      NAIS_APP_NAME: "dittnav"
      NAV_DEKORATOREN_URL: "http://dekoratoren.dittnav.docker-internal:8088"
      NAIS_NAMESPACE: "localhost"
      DITTNAV_API_URL: "http://localhost:8091/dittnav-api"
      TJENESTER_URL: "http://dummyTjenester.nav.no"
      EVENT_TEST_PRODUCER_URL: "http://localhost:8094/tms-event-test-producer"
      NAVNO_URL: "www.nav.no"
      LOGIN_URL: "http://localhost:50000?redirect=http://localhost:3000"
      VTA_URL: "http://dummyVeientilarbeid.nav.no"
      IS_PROD: "false"
      INNLOGGINGSSTATUS_URL: "http://localhost:8095/innloggingsstatus"
      ARBEIDSSOKERREGISTRERING_URL: "http://dummyArbeidssokerregistrering.nav.no"
      TEST_SIDE_FEATURE_TOGGLE: "true"
      AKTIVITETSPLAN_URL: "http://dummyAktivitetsplan.nav.no"
      DINE_PLEIEPENGER_URL: "http://dummySykdomIFamilien.nav.no"
      DITT_SYKEFRAVAER_URL: "http://dummySykefravaer.nav.no"
      VEILEDERARBEIDSSOKER_URL: "http://dummyVeilederArbeidssoker.nav.no"
      MIN_INNBOKS_URL: "http://dummyMinInnboks.nav.no"
      DAGPENGER_URL: "http://dummyDagpenger.nav.no"
      HJELPEMIDLER_URL: "http://dummyHjelpemidler.nav.no"
      VARSLINGER_FEATURE_TOGGLE: "false"
      LOGIN_LEVEL_4_URL: "http://dummyloginLevel4.nav.no"
      TIDSLINJE_URL: "http://dummyTidslinje.nav.no"
      TIDSLINJE_PRODUSENT: "produsent"
      VEIENTILARBEID_URL: "http://dummyVeientilarbeid.nav.no"
      MINE_SAKER_URL: "https://dummy-minesaker.nav.no"
      INNBOKS_URL: "https://dummyInnboks.nav.no"
      UTBETALINGSOVERSIKT_URL: "https://dummyUtbetalingsoversikt.nav.no"
      LEDIGE_STILLINGER_URL: "https://dummyLedigeStillinger.nav.no"
      DIGISOS_URL: "https://dummySosialhjelp.nav.no"
      # Dette er et lite hack for å slippe at loggen oversvømmes av meldinger om at sensu-hosten ikke finnes.
      sensu_client_host: "localhost"
      sensu_client_port: "8080"

  varselbestiller:
    container_name: varselbestiller
    networks:
      dittnav.docker-internal:
        aliases:
          - varselbestiller.dittnav.docker-internal
    image: "ghcr.io/navikt/dittnav-varselbestiller/dittnav-varselbestiller:latest"
    mem_limit: '1200m'
    mem_reservation: '1024m'
    ports:
      - "8098:8080"
    env_file: .env
    environment:
      DB_DATABASE: ${DB_NAME_VARSELBESTILLER}
      DB_USERNAME: "${DB_NAME_VARSELBESTILLER}-user"
      SENSU_HOST: "stub"
      SENSU_PORT: "0"
      GROUP_ID: "dittnav_varselbestiller"
      POLL_BESKJED_TO_DOKNOTIFIKASJON: "true"
      POLL_OPPGAVE_TO_DOKNOTIFIKASJON: "true"
      POLL_INNBOKS_TO_DOKNOTIFIKASJON: "true"
      POLL_DONE_TO_DOKNOTIFIKASJON_STOPP: "true"
      EVENT_HANDLER_URL: "http://handler.dittnav.docker-internal:8080"
      INTERN_BESKJED_TOPIC: "min-side.privat-brukernotifikasjon-beskjed-v1"
      INTERN_OPPGAVE_TOPIC: "min-side.privat-brukernotifikasjon-oppgave-v1"
      INTERN_INNBOKS_TOPIC: "min-side.privat-brukernotifikasjon-innboks-v1"
      INTERN_DONE_TOPIC: "min-side.privat-brukernotifikasjon-done-v1"
      DOKNOTIFIKASJON_TOPIC: "privat-dok-notifikasjon"
      DOKNOTIFIKASJON_STOP_TOPIC: "privat-dok-notifikasjon-stopp"
      # variabler for on-prem
      DB_NAME: ${DB_NAME_VARSELBESTILLER}
    depends_on:
      - schema-registry
      - postgres

  brukernotifikasjonbestiller:
    container_name: brukernotifikasjonbestiller
    networks:
      dittnav.docker-internal:
        aliases:
          - brukernotifikasjonbestiller.dittnav.docker-internal
    image: "ghcr.io/navikt/dittnav-brukernotifikasjonbestiller/dittnav-brukernotifikasjonbestiller:latest"
    mem_limit: '768m'
    mem_reservation: '580m'
    ports:
      - "8101:8080"
    env_file: .env
    environment:
      SENSU_HOST: "stub"
      SENSU_PORT: "0"
      GROUP_ID: "dittnav-brukernotifikasjonbestiller"
      EVENT_HANDLER_URL: "http://handler.dittnav.docker-internal:8080"
      DB_DATABASE: ${DB_NAME_BRUKERNOTIFIKASJONBESTILLER}
      DB_USERNAME: "${DB_NAME_BRUKERNOTIFIKASJONBESTILLER}-user"
      POLL_BESKJED_INPUT: "true"
      POLL_OPPGAVE_INPUT: "true"
      POLL_INNBOKS_INPUT: "true"
      POLL_STATUSOPPDATERING_INPUT: "true"
      POLL_DONE_INPUT: "true"
      POLL_BESKJED: "true"
      POLL_OPPGAVE: "true"
      POLL_INNBOKS: "true"
      POLL_STATUSOPPDATERING: "true"
      POLL_DONE: "true"
      INTERN_BESKJED_TOPIC: "min-side.privat-brukernotifikasjon-beskjed-v1"
      INTERN_OPPGAVE_TOPIC: "min-side.privat-brukernotifikasjon-oppgave-v1"
      INTERN_INNBOKS_TOPIC: "min-side.privat-brukernotifikasjon-innboks-v1"
      INTERN_STATUSOPPDATERING_TOPIC: "min-side.privat-brukernotifikasjon-statusoppdatering-v1"
      INTERN_DONE_TOPIC: "min-side.privat-brukernotifikasjon-done-v1"
      OPEN_INPUT_BESKJED_TOPIC: "min-side.aapen-brukernotifikasjon-nyBeskjed-v1"
      OPEN_INPUT_OPPGAVE_TOPIC: "min-side.aapen-brukernotifikasjon-nyOppgave-v1"
      OPEN_INPUT_INNBOKS_TOPIC: "min-side.aapen-brukernotifikasjon-nyInnboks-v1"
      OPEN_INPUT_STATUSOPPDATERING_TOPIC: "min-side.aapen-brukernotifikasjon-nyStatusoppdatering-v1"
      OPEN_INPUT_DONE_TOPIC: "min-side.aapen-brukernotifikasjon-done-v1"
      LEGACY_BESKJED_TOPIC: "aapen-brukernotifikasjon-nyBeskjed-v1"
      LEGACY_DONE_TOPIC: "aapen-brukernotifikasjon-done-v1"
      LEGACY_INNBOKS_TOPIC: "aapen-brukernotifikasjon-nyInnboks-v1"
      LEGACY_OPPGAVE_TOPIC: "aapen-brukernotifikasjon-nyOppgave-v1"
      LEGACY_STATUSOPPDATERING_TOPIC: "aapen-brukernotifikasjon-nyStatusoppdatering-v1"
      FEILRESPONS_TOPIC: "min-side.aapen-brukernotifikasjon-feilrespons-v1"
      SERVICEUSER_MAPPING: "username|min-side:dittnav-event-test-producer"
    depends_on:
      - schema-registry
      - postgres

volumes:
  postgres-data:

networks:
  dittnav.docker-internal: